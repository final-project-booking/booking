datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int          @id @default(autoincrement())
  imgUrl         String
  firstName      String
  lastName       String
  email          String       @unique
  password       String
  phoneNumber    Int
  longitude      Float?
  latitude       Float?
  isActive       Boolean      @default(false)
  activationCode String
  role           Role?        @default(user)
  owner          Owner?       @relation(fields: [ownerId], references: [id])
  ownerId        Int?         @unique
  reservation    Reservation?
  message        Message[]
  join           JoinChat[]
}

enum Role {
  owner
  user
}

model Hotel {
  id          Int     @id @default(autoincrement())
  name        String
  imgUrl      String?
  longitude   Float?
  latitude    Float?
  description String
  rating      Int
  rooms       Int
  licence     String
  owner       Owner   @relation(fields: [ownerId], references: [id])
  ownerId     Int     @unique
  room        Room[]
  offres      Offer[]
}

enum Option {
  breakFast
  all_Inclusive
  halfBoard
}

model Owner {
  id    Int     @id @default(autoincrement())
  user  User?
  hotel Hotel[]
}

model Reservation {
  id        Int      @id @default(autoincrement())
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  startDate DateTime
  endDate   DateTime
}

model Room {
  id              Int               @id @default(autoincrement())
  hotel           Hotel             @relation(fields: [hotelId], references: [id])
  hotelId         Int
  reservation     Reservation?
  dayAvailability DayAvailability[]
  price           Int
  capacity        Int
  imgUrl          String
  option          Option?
  view            View
}

enum View {
  seaView
  standerView
}

model DayAvailability {
  id           Int     @id @default(autoincrement())
  room         Room    @relation(fields: [roomId], references: [id])
  roomId       Int     @unique
  availability Boolean @default(true)
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User     @relation(fields: [userId], references: [id])
  userId    Int
  room      RoomChat @relation(fields: [roomId], references: [id]) // This establishes a many-to-one relationship with Room
  roomId    Int
}

model RoomChat {
  id       Int        @id @default(autoincrement())
  messages Message[]
  join     JoinChat[]
}

model JoinChat {
  id     Int      @id @default(autoincrement())
  users  User     @relation(fields: [userId], references: [id])
  userId Int
  rooms  RoomChat @relation(fields: [roomId], references: [id])
  roomId Int
}

model Offer {
  id      Int    @id @default(autoincrement())
  hotel   Hotel  @relation(fields: [hotelId], references: [id])
  hotelId Int
  offer   String
}
