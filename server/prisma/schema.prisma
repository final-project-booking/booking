
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int          @id @default(autoincrement())
  imgUrl         String
  firstName      String
  lastName       String
  email          String       @unique
  password       String
  phoneNumber    Int
  longitude      Float?
  latitude       Float?
  isActive       Boolean      @default(false)
  activationCode String
  role           Role?        @default(user)
  owner          Owner?       @relation(fields: [ownerId], references: [id])
  ownerId        Int?         @unique
  reservation    Reservation[]
  message        Message[]
  join           JoinChat[]
  reviw          Review[]
  negociate      Negotiation[]
}

enum Role {
  owner
  user
}

model Hotel {
  id          Int      @id @default(autoincrement())
  name        String
  imgUrl      String?
  longitude      Float?
  latitude       Float?
  description String
  rating      Int
  rooms       Int
  licence     String
  owner       Owner?    @relation(fields: [ownerId], references: [id])
  ownerId     Int?
  room        Room[]
  review      Review[]
  media       Media[]
}

enum MealPlan {
  breakFast
  all_Inclusive
  halfBoard
}
model Option {
  id     Int    @id @default(autoincrement())
  Meal_Plan MealPlan
  room    Room  @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId  Int   @unique
}

model Owner {
  id    Int     @id @default(autoincrement())
  user  User?
  hotel Hotel[]
}

  model Reservation {
    id        Int      @id @default(autoincrement())
    room      Room     @relation(fields: [roomId], references: [id])
    roomId    Int      
    user      User     @relation(fields: [userId], references: [id])
    userId    Int     
    startDate DateTime
    endDate   DateTime
  }

model Room {
  id              Int      @unique       @id @default(autoincrement())
  hotel           Hotel             @relation(fields: [hotelId], references: [id])
  hotelId         Int
  reservation     Reservation[]
  dayAvailability DayAvailability[]
  price           Int
  capacity        Int
  imgUrl          String
  option          Option?
  view            View
  media           Media[]
  reduction       Boolean  @default(false)
  rate            Int
  negociate       Negotiation[]
}

enum media {
  photo
  pdf
}
enum View {
  seaView
  standerView
}
model Media {
 id           Int     @id @default(autoincrement())
 room         Room    @relation(fields: [roomId], references: [id])
 roomId       Int     
 type          media 
 link          String
 hotel         Hotel    @relation(fields: [hotelId], references: [id])
 hotelId       Int 
}

model DayAvailability {
  id           Int     @id @default(autoincrement())
  room         Room    @relation(fields: [roomId], references: [id])
  roomId       Int 
  nigth        DateTime
  availability Boolean @default(true)
}

model Message {
  id          Int       @id @default(autoincrement()) 
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  users        User      @relation(fields: [userId], references: [id])
  userId      Int
  room        RoomChat      @relation(fields: [roomId], references: [id])
  roomId      Int
   
}

model RoomChat {
  id        Int       @id @default(autoincrement())
  messages  Message[]  
  join JoinChat[]  
}
 model JoinChat {
   id          Int       @id @default(autoincrement()) 
  users    User  @relation(fields: [userId], references: [id])
  userId  Int 
  rooms    RoomChat  @relation(fields: [roomId], references: [id])
  roomId  Int
}

model Review {
  id      Int    @id @default(autoincrement())
  stars   Int    @default(1)
  content String
  hotel   Hotel  @relation(fields: [hotelId], references: [id])
  hotelId Int
  user    User   @relation(fields: [userId], references: [id])
  userId  Int
}
model  Negotiation{
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  room      Room      @relation(fields: [roomId], references: [id])
  roomId    Int
  content   String
  newPrice  Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}